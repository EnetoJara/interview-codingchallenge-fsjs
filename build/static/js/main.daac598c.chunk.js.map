{"version":3,"sources":["client/prod.ts","client/components/home/home-component.tsx","client/utils/constants.ts","client/modules/list/list-selectors.ts","client/containers/home-contaier.ts","client/modules/list/list-actions.ts","client/hoc/header/header-hoc.tsx","client/hoc/layout/layout-hoc.tsx","client/hoc/main/main-hoc.tsx","client/hoc/side-nav/side-nav-hoc.tsx","client/components/app/app-component.tsx","client/modules/list/list-worker.ts","client/modules/list/list-watchers.ts","client/modules/list/list-reducer.ts","client/redux/reducers.ts","client/worker.ts","client/start/prod.tsx","client/redux/store/prod.ts","client/modules/index.ts"],"names":["require","Home","React","constructor","props","super","componentDidMount","getAllLists","this","render","process","ROUTE_LIST","ENETO_API","lists","createSelector","state","dispatchToPorps","type","payload","undefined","connect","Header","children","className","Layout","Main","SideNav","App","exact","path","component","homeContaier","getAllListWorker","listWatchers","fork","takeEvery","iniListState","Object","freeze","rootReducer","combineReducers","action","Boolean","window","location","hostname","RegExp","test","store","initialState","sagaMiddleware","createSagaMiddleware","middleware","run","createStore","applyMiddleware","runSaga","configureStore","all","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0IAGAA,EAAQ,IACRA,EAAQ,IAERA,EAAQ,IACRA,EAAQ,K,gHCGD,MAAMC,UAAaC,gBAEfC,YAAaC,GAChBC,MAAMD,GAIHE,oBACH,IAAM,YAACC,GAAeC,KAAKJ,MAE3BG,IAGGE,SACH,OACI,8C,MCtBcC,uOAAYC,WAQzBD,uOAAYE,U,YCNZC,EAAQC,YAFHC,GAAoBA,EAAMF,MAEEA,GAASA,GCMjDG,EAAkB,CACpBT,YCqEG,WACH,MAAO,CACHU,KHpDyB,oBGqDzBC,aAASC,KDrEFC,cAVML,IACV,CACHF,MAAOA,EAAME,KAQiBC,EAAvBI,CAAwCnB,GEVhD,SAASoB,EAAQjB,GACpB,IAAM,SAAEkB,GAAalB,EACrB,OAAO,uBAAKmB,UAAU,qBAAqBD,GCFxC,SAASE,EAAQpB,GACpB,IAAM,SAAEkB,GAAalB,EACrB,OAAO,uBAAKmB,UAAU,cAAcD,GCFjC,SAASG,EAAMrB,GAClB,IAAM,SAAEkB,GAAalB,EACrB,OAAO,uBAAKmB,UAAU,mBAAmBD,GCDtC,SAASI,EAAStB,GACrB,IAAM,SAAEkB,GAAalB,EACrB,OAAO,uBAAKmB,UAAU,uBAAuBD,GCsB1C,IAAMK,EAvBb,WACI,OACI,gBAACH,EAAD,KACI,gBAAC,IAAD,KACI,gBAACE,EAAD,KACI,uCAEJ,gBAACD,EAAD,KACI,gBAACJ,EAAD,KACI,qCACA,qCAEJ,wBAAME,UAAU,4BACZ,gBAAC,IAAD,KACA,gBAAC,IAAD,CAAOK,OAAK,EAACC,KRnBjB,IQmB6BC,UAAWC,U,QClBrD,SAAUC,KCKV,IAAMC,EAAe,CACxBC,aALJ,kBACUC,YV0BuB,oBU1BMH,O,mQCHhC,IAAMI,EAAeC,OAAOC,OAAkB,CACjDzB,MAAO,KCEJ,IAAM0B,EAAcC,YAA0B,CACjD3B,MDAG,SAAsBE,EAAmBqB,EAAcK,GAIlD,OAHAA,EAAOxB,K,iWAGA,CAAP,GACOF,M,oOEwCC2B,QACa,cAA7BC,OAAOC,SAASC,UACiB,UAA7BF,OAAOC,SAASC,UAChB,IAAIC,OAAO,0DAA0DC,KAAKJ,OAAOC,SAASC,WC5ClG,IAAMG,ECNC,SAAmCC,GACtC,IAAMC,EAAiBC,cACjBC,EAAa,CAACF,IACd,IAAEG,GAAQH,EAChB,O,iWAAO,IACAI,YAAYf,EAAaU,EAAcM,eAAmBH,IADjE,CAEII,QAASH,IDAHI,CAAe,IAC7BT,EAAMQ,SERC,kBACGE,YAAI,IACHzB,OFQXxB,iBACI,kBAAC,IAAD,CAAUuC,MAAOA,GACb,kBAACrB,EAAD,OAEJgC,SAASC,eAAe,YDqEpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,KAAMC,IAChCA,EAAaC,iB","file":"static/js/main.daac598c.chunk.js","sourcesContent":["\n\n\nrequire(\"@babel/runtime-corejs3/regenerator\");\nrequire(\"@babel/register\");\nrequire(\"core-js/web/index\");\nrequire(\"es6-promise/auto\");\nrequire(\"./start/prod.tsx\");\n","import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { GetAllLists } from \"../../modules/list/list-actions\";\n\nexport interface HomeProps extends RouteComponentProps {\n    getAllLists: GetAllLists\n}\n\nexport type HomeState = any;\n\nexport class Home extends React.PureComponent<HomeProps, HomeState> {\n\n    public constructor (props: HomeProps) {\n        super(props);\n\n    }\n\n    public componentDidMount () {\n        const {getAllLists} = this.props;\n\n        getAllLists();\n    }\n\n    public render (): React.ReactElement<HomeProps> {\n        return (\n            <div>\n                Home component\n            </div>\n        )\n    }\n}\n","import * as qs from \"qs\";\n\nexport const HOME = \"/\";\nexport const ROUTE_LIST = process.env.ROUTE_LIST;\nexport const ROUTE_LIST_BY_iD = process.env.ROUTE_LIST_BY_iD;\nexport const ROUTE_ITEM_BY_LIST_ID = process.env.ROUTE_ITEM_BY_LIST_ID;\nexport const ROUTE_ITEM_BY_LIST_ID_ITEM_ID = process.env.ROUTE_ITEM_BY_LIST_ID_ITEM_ID;\n\nexport const apiConfig = {\n    withCredentials: true,\n    timeout: 15000,\n    baseURL: process.env.ENETO_API,\n    headers: {\n        common: {\n            \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n            \"Transfer-Encoding\": \"chucked\",\n            \"Accept-Ranges\": \"none\",\n            Vary: \"Accept-Econding\",\n            Pragma: \"no-cache\",\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n            Expires: \"-1\",\n            \"Strict-Transport-Security\": \"max-age=31536000; includeSubDomains; preload\",\n            \"X-XSS-Protection\": \"1;mode=block\",\n            \"X-Frame-Options\": \"SAMEORIGIN\",\n            \"Content-Security-Policy\": \"script-src 'self'\",\n            \"X-Content-Type-Options\": \"nosniff\"\n        }\n    },\n    paramsSerializer: (params) => qs.stringify(params, { indices: false })\n};\nexport const GET_LISTS_REQUEST = \"GET_LISTS_REQUEST\";\nexport type GET_LISTS_REQUEST = typeof GET_LISTS_REQUEST;\nexport const GET_LISTS_FAILED = \"GET_LISTS_FAILED\";\nexport type GET_LISTS_FAILED = typeof GET_LISTS_FAILED;\nexport const GET_LISTS_SUCCESS = \"GET_LISTS_SUCCESS\";\nexport type GET_LISTS_SUCCESS = typeof GET_LISTS_SUCCESS;\n\nexport const ADD_LISTS_REQUEST = \"ADD_LISTS_REQUEST\";\nexport type ADD_LISTS_REQUEST = typeof ADD_LISTS_REQUEST;\nexport const ADD_LISTS_FAILED = \"ADD_LISTS_FAILED\";\nexport type ADD_LISTS_FAILED = typeof ADD_LISTS_FAILED;\nexport const ADD_LISTS_SUCCESS = \"ADD_LISTS_SUCCESS\";\nexport type ADD_LISTS_SUCCESS = typeof ADD_LISTS_SUCCESS;\n\nexport const DELETE_LISTS_REQUEST = \"DELETE_LISTS_REQUEST\";\nexport type DELETE_LISTS_REQUEST = typeof DELETE_LISTS_REQUEST;\nexport const DELETE_LISTS_FAILED = \"DELETE_LISTS_FAILED\";\nexport type DELETE_LISTS_FAILED = typeof DELETE_LISTS_FAILED;\nexport const DELETE_LISTS_SUCCESS = \"DELETE_LISTS_SUCCESS\";\nexport type DELETE_LISTS_SUCCESS = typeof DELETE_LISTS_SUCCESS;\n\n\nexport const UPDATE_LISTS_REQUEST = \"UPDATE_LISTS_REQUEST\";\nexport type UPDATE_LISTS_REQUEST = typeof UPDATE_LISTS_REQUEST;\nexport const UPDATE_LISTS_FAILED = \"UPDATE_LISTS_FAILED\";\nexport type UPDATE_LISTS_FAILED = typeof UPDATE_LISTS_FAILED;\nexport const UPDATE_LISTS_SUCCESS = \"UPDATE_LISTS_SUCCESS\";\nexport type UPDATE_LISTS_SUCCESS = typeof UPDATE_LISTS_SUCCESS;\n","import { createSelector } from \"reselect\";\nimport { AppState } from \"resume-app\";\n\nconst getLists = (state: AppState) => state.lists;\n\nexport const lists = createSelector(getLists, lists => lists);\n","import { connect } from \"react-redux\";\nimport { Home } from \"../components/home\";\nimport { getAllLists } from \"../modules/list/list-actions\";\nimport { lists } from \"../modules/list/list-selectors\";\n\nconst stateToProps = state => {\n    return {\n        lists: lists(state)\n    }\n};\n\nconst dispatchToPorps = {\n    getAllLists: getAllLists\n};\n\nexport default connect (stateToProps, dispatchToPorps)(Home);\n","import { AppAction, List } from \"resume-app\";\nimport { ADD_LISTS_FAILED, ADD_LISTS_REQUEST, ADD_LISTS_SUCCESS, DELETE_LISTS_FAILED, DELETE_LISTS_REQUEST, DELETE_LISTS_SUCCESS, GET_LISTS_FAILED, GET_LISTS_REQUEST } from \"../../utils/constants\";\n\n/**\n* Action creator to handle adding new list.\n* @param {List} list value to be dispatched\n* @returns {AppAction<ADD_LISTS_REQUEST,List>} action\n*/\nexport function addList (list:List): AppAction<ADD_LISTS_REQUEST,List> {\n    return {\n        type: ADD_LISTS_REQUEST,\n        payload: list\n    }\n}\n\n/**\n* Action creator nofities if the list was created successfully.\n* @param {List} list value to be dispatched\n* @returns {AppAction<ADD_LISTS_SUCCESS,List>} action\n*/\nexport function addListSuccess (): AppAction<ADD_LISTS_SUCCESS,undefined> {\n    return {\n        type: ADD_LISTS_SUCCESS,\n        payload: undefined\n    }\n}\n\n/**\n* Action creator nofities if the list was created successfully.\n* @param {List} list value to be dispatched\n* @returns {AppAction<ADD_LISTS_FAILED,List>} action\n*/\nexport function addListFailed (): AppAction<ADD_LISTS_FAILED,undefined> {\n    return {\n        type: ADD_LISTS_FAILED,\n        payload: undefined\n    }\n}\n\n\n/**\n* Action creator to handle adding new list.\n* @param {List} list value to be dispatched\n* @returns {AppAction<ADD_LISTS_REQUEST,List>} action\n*/\nexport function deleteList (list:List): AppAction<DELETE_LISTS_REQUEST,List> {\n    return {\n        type: DELETE_LISTS_REQUEST,\n        payload: list\n    }\n}\n\n/**\n* Action creator nofities if the list was created successfully.\n* @param {List} list value to be dispatched\n* @returns {AppAction<DELETE_LISTS_SUCCESS,List>} action\n*/\nexport function deleteListSuccess (): AppAction<DELETE_LISTS_SUCCESS,undefined> {\n    return {\n        type: DELETE_LISTS_SUCCESS,\n        payload: undefined\n    }\n}\n\n/**\n* Action creator nofities if the list was created successfully.\n* @param {List} list value to be dispatched\n* @returns {AppAction<DELETE_LISTS_FAILED,List>} action\n*/\nexport function deleteListFailed (): AppAction<DELETE_LISTS_FAILED,undefined> {\n    return {\n        type: DELETE_LISTS_FAILED,\n        payload: undefined\n    }\n}\n\n/**\n * @description Gets all lists\n *\n * @returns all lists\n */\nexport function getAllLists (): AppAction<GET_LISTS_REQUEST, undefined> {\n    return {\n        type: GET_LISTS_REQUEST,\n        payload: undefined\n    }\n}\n\nexport type GetAllLists = typeof getAllLists;\n\n/**\n * @description Gets all lists\n *\n * @returns all lists\n */\nexport function getAllListsFailed (error): AppAction<GET_LISTS_FAILED, Error> {\n    return {\n        type: GET_LISTS_FAILED,\n        payload: error\n    }\n}\n\nexport type GetAllListsFailed = typeof getAllListsFailed;\n","import * as React from \"react\";\n\nexport interface HeaderProps {\n    children: React.ReactElement[];\n}\nexport function Header (props: HeaderProps): React.ReactElement<HeaderProps> {\n    const { children } = props;\n    return <div className=\"app-layout-header\">{children}</div>;\n}\n","import * as React from \"react\";\n\nexport interface LayoutProps {\n    children: React.ReactElement;\n}\nexport function Layout (props: LayoutProps): React.ReactElement<LayoutProps> {\n    const { children } = props;\n    return <div className=\"app-layout\">{children}</div>;\n}\n","import * as React from \"react\";\n\nexport interface MainProps {\n    children: React.ReactElement[];\n}\nexport function Main (props: MainProps): React.ReactElement<MainProps> {\n    const { children } = props;\n    return <div className=\"app-layout-main\">{children}</div>;\n}\n","\nimport * as React from \"react\";\n\nexport interface SideNavProps {\n    children: React.ReactChild;\n}\nexport function SideNav (props: SideNavProps): React.ReactElement<SideNavProps> {\n    const { children } = props;\n    return <div className=\"app-layout-side-nav\">{children}</div>;\n}\n","import * as React from \"react\";\nimport { hot } from \"react-hot-loader\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport homeContaier from \"../../containers/home-contaier\";\nimport { Header, Layout, Main, SideNav } from \"../../hoc\";\nimport { HOME } from \"../../utils/constants\";\n\nfunction MainComponent (): React.ReactElement {\n    return (\n        <Layout>\n            <BrowserRouter>\n                <SideNav>\n                    <nav>SideNav</nav>\n                </SideNav>\n                <Main>\n                    <Header>\n                        <div>Header</div>\n                        <div>son 2</div>\n                    </Header>\n                    <main className=\"app-layout-main__content\">\n                        <Switch>\n                        <Route exact path={HOME} component={homeContaier} />\n                        </Switch>\n                    </main>\n                </Main>\n            </BrowserRouter>\n        </Layout>\n    );\n}\n\nexport const App = process.env.NODE_ENV === \"development\" ? hot(module)(MainComponent) : MainComponent;\n","import { put } from \"redux-saga/effects\";\nimport { getAllListsFailed } from \"./list-actions\";\n\nexport function* getAllListWorker () {\n    try {\n\n    } catch (error) {\n       yield put(getAllListsFailed(error))\n    }\n}\n","import { fork, takeEvery } from \"redux-saga/effects\";\nimport { GET_LISTS_REQUEST } from \"../../utils/constants\";\nimport {getAllListWorker} from \"./list-worker\";\n\nfunction* getAllListWatcher () {\n    yield takeEvery(GET_LISTS_REQUEST, getAllListWorker);\n}\n\nexport const listWatchers = [\n    fork(getAllListWatcher)\n]\n","import { AppAction, ListState } from \"../../types/resume-app\";\n\nexport const iniListState = Object.freeze<ListState>({\n    lists: []\n});\n\nexport function listReducer (state: ListState = iniListState, action: AppAction){\n    switch (action.type) {\n\n        default:\n            return {\n                ...state\n            }\n    }\n}\n","import { combineReducers } from \"redux\";\nimport { AppState } from \"resume-app\";\nimport { listReducer } from \"../modules/list/list-reducer\";\n\n\nexport const rootReducer = combineReducers<AppState>({\n    lists: listReducer\n});\n","function registerValidSW(swUrl: string, config?: Config): void {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            const egistration = registration;\n            egistration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (!installingWorker) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            console.log(\"New content is available and will be used when all \");\n\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            console.log(\"Content is cached for offline use.\");\n\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\nfunction checkValidServiceWorker(swUrl: string, config: Config): void {\n    fetch(swUrl)\n        .then((response) => {\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType && !contentType.includes(\"javascript\"))) {\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        window.location.hostname === \"[::1]\" ||\n        new RegExp(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/).test(window.location.hostname)\n);\n\ninterface Config {\n    onSuccess?(registration: ServiceWorkerRegistration): void;\n    onUpdate?(registration: ServiceWorkerRegistration): void;\n}\n\nexport function register(config: Config): void {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                checkValidServiceWorker(swUrl, config);\n\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\"This web app is being served cache-first by a service \");\n                });\n            } else {\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nexport function unregister(): void {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { AppState } from \"resume-app\";\nimport { App } from \"../components/app/\";\nimport { rootSagas } from \"../modules\";\nimport { configureStore } from \"../redux/store/prod\";\nimport \"../styles/index.scss\";\nimport { unregister } from \"../worker\";\n\nconst store = configureStore({});\nstore.runSaga(rootSagas);\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"enetito\")\n);\n\nunregister();\n","import { applyMiddleware, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { rootReducer } from \"../reducers\";\n\nexport function configureStore<AppState> (initialState: AppState) {\n    const sagaMiddleware = createSagaMiddleware();\n    const middleware = [sagaMiddleware];\n    const { run } = sagaMiddleware;\n    return {\n        ...createStore(rootReducer, initialState, applyMiddleware(...middleware)),\n        runSaga: run\n    };\n}","import { all } from \"redux-saga/effects\";\nimport { listWatchers } from \"./list/list-watchers\";\n\nexport function* rootSagas () {\n    yield all([\n        ...listWatchers\n    ])\n}\n"],"sourceRoot":""}